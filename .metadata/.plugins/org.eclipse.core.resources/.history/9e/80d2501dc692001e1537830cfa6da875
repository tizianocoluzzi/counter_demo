package counter_demo;

import java.io.IOException;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Scanner;
import java.util.logging.Logger;
import java.io.File;
import java.io.FileNotFoundException;

class Run implements Runnable{
	public Logger log;
	public PrintWriter scrivi;
	public Scanner leggi;
	public ServerSocket server;
	public Socket socket;
	public File f;
	public Scanner leggiFile;
	public PrintWriter scriviFile; 
	public Run(Socket socket) {
		log = Logger.getLogger("thread");
		this.socket = socket;
		log.info("creato runner");
		File f = new File("./data.txt");
		log.info(f.toString());
		if(!f.exists()) {
			try {
				f.createNewFile();
			} catch (IOException e) {
				log.severe("impossibile creare il file");
			}
		}
	}
	@Override
	public void run() {
		log.info("connessione accettata");
		try {
			leggi = new Scanner(socket.getInputStream());
			String ricevuto;
			while(leggi.hasNextLine()) {
				ricevuto = leggi.nextLine();
				log.info(ricevuto);
				String[] msg = ricevuto.split(":");
				if(msg[0].equals("USERNAME")) {
					log.info("ricevuto un username" );
					if(this.findUser(msg[1])) {
						log.info("utente trovato");
					}
					else {
						scriviFile = new PrintWriter(f);
						scriviFile.println(msg[1] + ":" + " 0");
						scriviFile.flush();
						
					}
					
				}
			}
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	private boolean findUser(String username, File f){
		log.info("entro nel FindUser");
		try {
			log.info(f.toString());
			Scanner data = new Scanner(f);
			String s;
			while(data.hasNextLine()) {
				s = data.nextLine();
				if(s.split(":")[0].equals(username)) {
					return true;
				}
			}
			return false;
		} catch (FileNotFoundException e) {
			e.printStackTrace();
			log.severe("missing database");
			try {
				f.createNewFile();
				return false;
			} catch (IOException e1) {
				log.severe("un macello col data");
				return false;
			}
			
		}
	}
	
}

public class Server {
	Logger log;
	public ServerSocket server;
	public Socket socket;
	public Thread t;
	public Run r;
	int port;
	public static void main(String[] args) {
		Server s = new Server();
	}
	public Server() {
		try {
			log = Logger.getLogger("server");
			log.info("entrato");
			server = new ServerSocket(4000);
			server.setReuseAddress(true);
			log.info("creato");
			while(true) {
				socket = server.accept();
				log.info("connessione accettata");
				Run r = new Run(socket);
				Thread t = new Thread(r);
				t.start();
			}
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
}
